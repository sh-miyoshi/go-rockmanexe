// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/newnet/netconnpb/netconn.proto

package netconnpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetConnClient is the client API for NetConn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetConnClient interface {
	TransData(ctx context.Context, opts ...grpc.CallOption) (NetConn_TransDataClient, error)
}

type netConnClient struct {
	cc grpc.ClientConnInterface
}

func NewNetConnClient(cc grpc.ClientConnInterface) NetConnClient {
	return &netConnClient{cc}
}

func (c *netConnClient) TransData(ctx context.Context, opts ...grpc.CallOption) (NetConn_TransDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetConn_ServiceDesc.Streams[0], "/netconn.NetConn/TransData", opts...)
	if err != nil {
		return nil, err
	}
	x := &netConnTransDataClient{stream}
	return x, nil
}

type NetConn_TransDataClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type netConnTransDataClient struct {
	grpc.ClientStream
}

func (x *netConnTransDataClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *netConnTransDataClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetConnServer is the server API for NetConn service.
// All implementations should embed UnimplementedNetConnServer
// for forward compatibility
type NetConnServer interface {
	TransData(NetConn_TransDataServer) error
}

// UnimplementedNetConnServer should be embedded to have forward compatible implementations.
type UnimplementedNetConnServer struct {
}

func (UnimplementedNetConnServer) TransData(NetConn_TransDataServer) error {
	return status.Errorf(codes.Unimplemented, "method TransData not implemented")
}

// UnsafeNetConnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetConnServer will
// result in compilation errors.
type UnsafeNetConnServer interface {
	mustEmbedUnimplementedNetConnServer()
}

func RegisterNetConnServer(s grpc.ServiceRegistrar, srv NetConnServer) {
	s.RegisterService(&NetConn_ServiceDesc, srv)
}

func _NetConn_TransData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetConnServer).TransData(&netConnTransDataServer{stream})
}

type NetConn_TransDataServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type netConnTransDataServer struct {
	grpc.ServerStream
}

func (x *netConnTransDataServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *netConnTransDataServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetConn_ServiceDesc is the grpc.ServiceDesc for NetConn service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetConn_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "netconn.NetConn",
	HandlerType: (*NetConnServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransData",
			Handler:       _NetConn_TransData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/newnet/netconnpb/netconn.proto",
}
